name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: sheharaa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest

      - name: Build & push analytics-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/analytics-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest

      - name: Build & push game-service
        uses: docker/build-push-action@v4
        with:
          context: ./game-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest

      - name: Build & push order-service
        uses: docker/build-push-action@v4
        with:
          context: ./order-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # ── Decode the EC2 private key ───────────────────────────────────────────
      - name: Create EC2 PEM file from base64
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2_key.pem
          chmod 644 ec2_key.pem

      # ── SSH & deploy to your EC2/k3s ────────────────────────────────────────
      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}       
          port: 22                            # ← SSH port
          username: ubuntu
          key_path: ec2_key.pem               # ← path to the decoded key
          script: |
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            cd ~/CMM707/lugx-cloud/k8s

            # Apply all deployments before setting images
            kubectl apply -f analytics/analytics-deployment.yaml
            kubectl apply -f analytics/analytics-service.yaml
            kubectl apply -f analytics/analytics-ingress.yaml

            kubectl apply -f frontend/frontend-deployment.yaml
            kubectl apply -f frontend/frontend-service.yaml
            kubectl apply -f frontend/frontend-ingress.yaml

            kubectl apply -f game/game-deployment.yaml
            kubectl apply -f game/game-service.yaml
            kubectl apply -f game/game-ingress.yaml

            kubectl apply -f order/order-deployment.yaml
            kubectl apply -f order/order-service.yaml
            kubectl apply -f order/order-ingress.yaml

            # Now do the rolling updates
            kubectl set image deployment/lugx-frontend \
              lugx-frontend=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest
            kubectl rollout status deployment/lugx-frontend

            kubectl set image deployment/analytics-service \
              analytics-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest
            kubectl rollout status deployment/analytics-service

            kubectl set image deployment/game-service \
              game-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest
            kubectl rollout status deployment/game-service

            kubectl set image deployment/order-service \
              order-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest
            kubectl rollout status deployment/order-service

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run integration tests
        run: |
          cd ./scripts
          ./integration-tests.sh

