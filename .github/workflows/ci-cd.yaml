name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: sheharaa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest

      - name: Build & push analytics-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/analytics-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest

      - name: Build & push game-service
        uses: docker/build-push-action@v4
        with:
          context: ./game-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest

      - name: Build & push order-service
        uses: docker/build-push-action@v4
        with:
          context: ./order-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy updated manifests to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: |
            frontend/*.yaml,
            game-service/*.yaml,
            order-service/*.yaml,
            k8s/analytics/*.yaml,
            scripts/integration-tests.sh,
            ingress.yaml
          target: ~/CMM707

      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          port: 22
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail

            # Ensure K3s + containerd are running
            if ! sudo systemctl is-active --quiet k3s; then
              sudo systemctl start k3s
            fi
            if ! sudo systemctl is-active --quiet containerd; then
              sudo systemctl start containerd
            fi

            # Prepare kubeconfig for 'ubuntu'
            sudo mkdir -p /home/ubuntu/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            chmod 600 /home/ubuntu/.kube/config
            export KUBECONFIG=/home/ubuntu/.kube/config

            # Wait for API to be ready
            for i in {1..30}; do
              if kubectl get nodes >/dev/null 2>&1; then break; fi
              sleep 2
            done
            kubectl get nodes -o wide
            kubectl get ns

            cd ~/CMM707

            # Apply (idempotent)
            kubectl apply -f frontend/frontend-deployment.yaml
            kubectl apply -f game-service/game-deployment.yaml
            kubectl apply -f order-service/order-deployment.yaml
            kubectl apply -f ingress.yaml
            kubectl apply -f k8s/analytics/clickhouse-single.yaml
            kubectl apply -f k8s/analytics/analytics-deployment.yaml
            kubectl apply -f k8s/analytics/analytics-service.yaml
            kubectl apply -f k8s/analytics/analytics-ingress.yaml

            # Update images
            kubectl set image deployment/lugx-frontend \
              lugx-frontend=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest
            kubectl set image deployment/game-service \
              game-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest
            kubectl set image deployment/order-service \
              order-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest
            kubectl set image deployment/analytics-service \
              analytics-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest

            # Wait for rollouts with helpful debugging on failure
            wait_rollout() {
              local deploy="$1"
              if ! kubectl rollout status "deployment/${deploy}" --timeout=5m; then
                echo "=== DEBUG: ${deploy} rollout failed ==="
                kubectl describe deployment "${deploy}" || true
                kubectl get pods -l app="${deploy}" -o wide || true
                # If your labels differ, also try by name prefix:
                kubectl get pods -A --sort-by=.metadata.creationTimestamp | tail -n 50 || true
                kubectl get events --sort-by=.lastTimestamp -A | tail -n 100 || true
                exit 1
              fi
            }

            wait_rollout lugx-frontend
            wait_rollout game-service
            wait_rollout order-service
            wait_rollout analytics-service

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: SSH & run integration tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          port:     22
          username: ubuntu
          key:      ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail

            # Ensure cluster is up and kubeconfig present
            if ! sudo systemctl is-active --quiet k3s; then
              sudo systemctl start k3s
            fi
            sudo mkdir -p /home/ubuntu/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            chmod 600 /home/ubuntu/.kube/config
            export KUBECONFIG=/home/ubuntu/.kube/config

            # Resolve lugx.local inside EC2 for ingress tests
            grep -q "lugx.local" /etc/hosts || echo "127.0.0.1 lugx.local" | sudo tee -a /etc/hosts

            # Optional quick check
            kubectl get pods -A || true

            cd ~/CMM707/scripts
            bash -x ./integration-tests.sh
