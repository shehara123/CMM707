name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: sheharaa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest

      - name: Build & push analytics-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/analytics-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest

      - name: Build & push game-service
        uses: docker/build-push-action@v4
        with:
          context: ./game-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest

      - name: Build & push order-service
        uses: docker/build-push-action@v4
        with:
          context: ./order-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy updated manifests to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: |
            frontend/*.yaml,
            game-service/*.yaml,
            order-service/*.yaml,
            k8s/analytics/*.yaml,
            scripts/integration-tests.sh,
            ingress.yaml
          target: ~/CMM707

      - name: SSH & deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          port: 22
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail

            # Ensure K3s is running (after stop/start it might not be ready yet)
            if ! sudo systemctl is-active --quiet k3s; then
              sudo systemctl start k3s
              sleep 8
            fi

            # Ensure kubeconfig is available for 'ubuntu'
            sudo mkdir -p /home/ubuntu/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            chmod 600 /home/ubuntu/.kube/config
            export KUBECONFIG=/home/ubuntu/.kube/config

            # Quick sanity checks (avoid --short for older kubectl)
            which kubectl || true
            kubectl version --client --output=yaml || true
            kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'; echo
            kubectl get nodes -o wide
            kubectl get ns

            cd ~/CMM707

            # Apply updated manifests
            kubectl apply -f frontend/frontend-deployment.yaml
            kubectl apply -f game-service/game-deployment.yaml
            kubectl apply -f order-service/order-deployment.yaml
            kubectl apply -f ingress.yaml
            kubectl apply -f k8s/analytics/clickhouse-single.yaml
            kubectl apply -f k8s/analytics/analytics-deployment.yaml
            kubectl apply -f k8s/analytics/analytics-service.yaml
            kubectl apply -f k8s/analytics/analytics-ingress.yaml

            # Perform rolling updates and wait for them
            kubectl set image deployment/lugx-frontend \
              lugx-frontend=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest
            kubectl rollout status deployment/lugx-frontend --timeout=5m

            kubectl set image deployment/game-service \
              game-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest
            kubectl rollout status deployment/game-service --timeout=5m

            kubectl set image deployment/order-service \
              order-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest
            kubectl rollout status deployment/order-service --timeout=5m

            kubectl set image deployment/analytics-service \
              analytics-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest
            kubectl rollout status deployment/analytics-service --timeout=5m

  integration-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: SSH & run integration tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.EC2_HOST }}
          port:     22
          username: ubuntu
          key:      ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euxo pipefail

            if ! sudo systemctl is-active --quiet k3s; then
              sudo systemctl start k3s
              sleep 8
            fi

            sudo mkdir -p /home/ubuntu/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml /home/ubuntu/.kube/config
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            chmod 600 /home/ubuntu/.kube/config
            export KUBECONFIG=/home/ubuntu/.kube/config

            # Make lugx.local resolve to localhost inside EC2 (for ingress tests)
            grep -q "lugx.local" /etc/hosts || echo "127.0.0.1 lugx.local" | sudo tee -a /etc/hosts

            # Optional quick check
            kubectl version --client --output=yaml || true
            kubectl get pods -A || true

            cd ~/CMM707/scripts
            bash -x ./integration-tests.sh
