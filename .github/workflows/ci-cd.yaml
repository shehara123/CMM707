name: CI/CD Pipeline

on:
  push:
    branches: [ main ]      # build & deploy on every push to main
  schedule:                 # run only the integration-test job daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:        # allow manual trigger in GitHub UI

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: sheharaa      # <— your Docker Hub namespace

jobs:
# ---------------------------------------------------
# 1) BUILD & PUSH all service images to Docker Hub
# ---------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest

      - name: Build & push analytics-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/analytics-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest

      - name: Build & push game-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/game-service          # ← adjust folder if needed
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest

      - name: Build & push order-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/order-service         # ← adjust folder if needed
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest

# ---------------------------------------------------
# 2) DEPLOY to K3s on EC2 with rolling updates
# ---------------------------------------------------
  deploy:
    needs: build-and-push           # run only if build job succeeds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.33.3          # match your cluster version

      - name: Configure kubeconfig for EC2-K3s
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/config

      - name: Rolling update frontend
        run: |
          kubectl set image deployment/lugx-frontend \
            lugx-frontend=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-frontend:latest
          kubectl rollout status deployment/lugx-frontend

      - name: Rolling update analytics-service
        run: |
          kubectl set image deployment/analytics-service \
            analytics-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-analytics-service:latest
          kubectl rollout status deployment/analytics-service

      - name: Rolling update game-service
        run: |
          kubectl set image deployment/game-service \
            game-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-game-service:latest
          kubectl rollout status deployment/game-service

      - name: Rolling update order-service
        run: |
          kubectl set image deployment/order-service \
            order-service=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_ORG }}/lugx-order-service:latest
          kubectl rollout status deployment/order-service

# ---------------------------------------------------
# 3) INTEGRATION TESTS
#    • runs after each deploy
#    • runs once daily via the cron trigger above
# ---------------------------------------------------
  integration-tests:
    # If triggered by push, wait for deploy; if by cron, run standalone
    needs: [deploy]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up test dependencies
        run: |
          sudo apt-get -y install curl jq           # or whatever your tests need

      - name: Run integration test suite
        run: |
          cd ./scripts
          bash integration-tests.sh

